---
- name: Check required variables
  ansible.builtin.assert:
    that:
      - hostname | length > 0
      - route53_zone | length > 0

- name: Create temporary build directory
  ansible.builtin.tempfile:
    state: directory
    suffix: "certbot53"
  register: cert_dir

- name: Generate top level certificate path
  ansible.builtin.set_fact:
    cert_path: "{{ cert_dir.path }}/{{ acme_env }}"

- name: Build top level directory
  ansible.builtin.file:
    path: "{{ cert_path }}"
    state: directory
    mode: '0700'

- name: Build paths from tmp file and acme env
  ansible.builtin.set_fact:
    privatekey_path: "{{ cert_path }}/{{ fqdn }}.pem"
    fullchain_path: "{{ cert_path }}/fullchain.crt"
    chain_path: "{{ cert_path }}/intermediate.crt"
    account_privatekey: "{{ cert_path }}/letsencrypt-{{ acme_env }}.pem"
    csr_path: "{{ cert_path }}/{{ fqdn }}.csr"
    crt_path: "{{ cert_path }}/{{ fqdn }}.crt"

- name: debug
  debug:
    msg: "{{ account_privatekey }}"

- name: Generate account private key
  community.crypto.openssl_privatekey:
    path: "{{ account_privatekey }}"

- name: Generate our server private key
  community.crypto.openssl_privatekey:
    path: "{{ privatekey_path }}"

- name: Generate an OpenSSL Certificate Signing Request
  community.crypto.openssl_csr:
    path: "{{ csr_path }}"
    privatekey_path: "{{ privatekey_path }}"
    common_name: "{{ fqdn }}"

- name: Create a challenge for `fqdn` using a account key file.
  community.crypto.acme_certificate:
    terms_agreed: yes
    acme_version: "{{ acme_version }}"
    account_key_src: "{{ account_privatekey }}"
    account_email: "{{ account_email }}"
    src: "{{ csr_path }}"
    cert: "{{ crt_path }}"
    challenge: dns-01
    acme_directory: "{{ acme_directory }}"
    # Renew if the certificate is at least 30 days old
    remaining_days: 60
  register: challenge_output

- name: debug
  debug:
    msg: "{{ challenge_output }}"

- name: fulfill challenge in route53
  community.aws.route53:
    #aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') | default(aws_access_key) }}"
    aws_access_key: "{{ aws_access }}"
    #aws_secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') | default(aws_secret_key) }}"
    aws_secret_key: "{{ aws_secret }}"
    zone: "{{ route53_zone }}"
    record: "{{ challenge_output.challenge_data[fqdn]['dns-01'].record }}"
    type: TXT
    ttl: 60
    state: present
    wait: yes
    # Note: route53 requires TXT entries to be enclosed in quotes
    value: "{{ challenge_output.challenge_data[fqdn]['dns-01'].resource_value | regex_replace('^(.*)$', '\"\\1\"') }}"
    overwrite: yes
  when: 
    - challenge_output is changed 
    - fqdn in challenge_output.challenge_data

- name: Let the challenge be validated and retrieve the cert and intermediate certificate
  community.crypto.acme_certificate:
    terms_agreed: yes
    acme_version: "{{ acme_version }}"
    account_key_src: "{{ account_privatekey }}"
    account_email: "{{ account_email }}"
    src: "{{ csr_path }}"
    cert: "{{ crt_path }}"
    fullchain: "{{ fullchain_path }}"
    chain: "{{ chain_path }}"
    challenge: dns-01
    acme_directory: "{{ acme_directory }}"
    remaining_days: 60
    data: "{{ challenge_output }}"
  when: challenge_output is changed


