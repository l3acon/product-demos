---
- name: Check if GitLab configuration file already exists.
  ansible.builtin.stat: path=/etc/gitlab/gitlab.rb
  register: gitlab_config_file

- name: Check if GitLab is already installed.
  ansible.builtin.stat: path=/usr/bin/gitlab-ctl
  register: gitlab_file

# Install GitLab and its dependencies.
- name: Install GitLab dependencies.
  ansible.builtin.package:
    name: "{{ gitlab_dependencies }}"
    state: present

- name: Download GitLab repository installation script.
  ansible.builtin.get_url:
    url: "https://packages.gitlab.com/install/repositories/gitlab/{{ gitlab_edition }}/script.rpm.sh"
    dest: /tmp/gitlab_install_repository.sh
    validate_certs: "{{ gitlab_download_validate_certs }}"
    mode: 005
  when: not gitlab_file.stat.exists

- name: Install GitLab repository.
  ansible.builtin.command: bash /tmp/gitlab_install_repository.sh
  register: output
  when: not gitlab_file.stat.exists

- name: Define the Gitlab package name.
  ansible.builtin.set_fact:
    gitlab_package_name: "{{ gitlab_edition }}-{{ gitlab_version }}"
  when: gitlab_version | default(false)

- name: Install GitLab
  ansible.builtin.package:
    name: "{{ gitlab_package_name | default(gitlab_edition) }}"
    state: present
  async: "{{ gitlab_timeout }}"
  poll: 5
  when: not gitlab_file.stat.exists

# Start and configure GitLab. Sometimes the first run fails, but after that,
# restarts fix problems, so ignore failures on this run.
e name: Reconfigure GitLab (first run).
  ansible.builtin.command: >
    /opt/gitlab/bin/gitlab-ctl reconfigure
    creates=/var/opt/gitlab/bootstrapped
  failed_when: false
  async: "{{ gitlab_timeout }}"
  poll: 5

- name: Copy GitLab configuration file.
  ansible.builtin.template:
    src: "{{ gitlab_config_template }}"
    dest: /etc/gitlab/gitlab.rb
    owner: root
    group: root
    mode: 0600
  notify: Restart gitlab
